digraph PARSER {
	NODE_0x15a904680 [label="SIMPLE_CMD_LINE\n"];
	NODE_0x15a904680 -> NODE_0x15a904660
	NODE_0x15a904660 [label="SEQUENTIAL_CMD\n"];
	NODE_0x15a904660 -> NODE_0x15a904640
	NODE_0x15a904640 [label="PIPE_CMD\n"];
	NODE_0x15a904640 -> NODE_0x15a904620
	NODE_0x15a904620 [label="CMD\n"];
	NODE_0x15a904620 -> NODE_0x15a904600
	NODE_0x15a904600 [label="ARGUMENT\n"];
	NODE_0x15a904600 -> NODE_0x15a904500
	NODE_0x15a904600 -> NODE_0x15a9045e0
	NODE_0x15a904500 [label="STRING < echo >\n"];
	NODE_0x15a9045e0 [label="ARGUMENT\n"];
	NODE_0x15a9045e0 -> NODE_0x15a904520
	NODE_0x15a9045e0 -> NODE_0x15a9045c0
	NODE_0x15a904520 [label="STRING < -n >\n"];
	NODE_0x15a9045c0 [label="ARGUMENT\n"];
	NODE_0x15a9045c0 -> NODE_0x15a904540
	NODE_0x15a9045c0 -> NODE_0x15a9045a0
	NODE_0x15a904540 [label="STRING < hello >\n"];
	NODE_0x15a9045a0 [label="ARGUMENT\n"];
	NODE_0x15a9045a0 -> NODE_0x15a904560
	NODE_0x15a904560 [label="RE_DIRECTUIN [ > ]\n"];
	NODE_0x15a904560 -> NODE_0x15a904580
	NODE_0x15a904580 [label="STRING < test1 >\n"];
}
